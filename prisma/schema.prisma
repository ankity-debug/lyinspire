generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      String   @default("user") @db.VarChar(20)
  name      String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  curatedInspirations Inspiration[] @relation("CuratedBy")
  submissions         Submission[]

  @@map("users")
  @@index([role])
  @@index([createdAt])
}

model Inspiration {
  id           String   @id @default(cuid())
  title        String   @db.VarChar(500)
  description  String?  @db.Text
  thumbnailUrl String?  @db.VarChar(1000)
  contentUrl   String   @unique @db.VarChar(1000)
  platform     String   @db.VarChar(50)
  authorName   String?  @db.VarChar(255)
  authorUrl    String?  @db.VarChar(1000)
  tags         String[]
  score        Float    @default(50)
  publishedAt  DateTime
  scrapedAt    DateTime @default(now())
  curatedBy    String?
  curator      User?    @relation("CuratedBy", fields: [curatedBy], references: [id])
  archived     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sourceMeta   Json?

  @@map("inspirations")
  @@index([archived, score(sort: Desc)])
  @@index([platform, archived, score(sort: Desc)])
  @@index([publishedAt, archived, score(sort: Desc)])
  @@index([createdAt])
  @@index([scrapedAt])
  @@index([curatedBy])
  @@index([tags], type: Gin)
}

model Submission {
  id              String    @id @default(cuid())
  title           String    @db.VarChar(500)
  description     String?   @db.Text
  contentUrl      String    @db.VarChar(1000)
  submitterName   String    @db.VarChar(255)
  submitterEmail  String    @db.VarChar(255)
  platform        String    @db.VarChar(50)
  tags            String[]
  status          String    @default("pending") @db.VarChar(20)
  submittedAt     DateTime  @default(now())
  reviewedAt      DateTime?
  reviewedBy      String?
  reviewer        User?     @relation(fields: [reviewedBy], references: [id])
  rejectionReason String?   @db.Text

  @@map("submissions")
  @@index([status, submittedAt(sort: Desc)])
  @@index([submittedAt(sort: Desc)])
  @@index([submitterEmail])
  @@index([reviewedBy])
  @@index([platform])
}

model DailyCuration {
  id          String   @id @default(cuid())
  date        DateTime @unique @db.Date
  awardPickId String?
  top10Ids    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("daily_curations")
  @@index([date(sort: Desc)])
  @@index([awardPickId])
}